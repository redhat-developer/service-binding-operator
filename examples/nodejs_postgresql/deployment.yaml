apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/pmacik/nodejs-rest-http-crud
    deployment.kubernetes.io/revision: "2"
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"nodejs-rest-http-crud:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"nodejs-rest-http-crud\")].image"}]'
  labels:
    app: nodejs-rest-http-crud
    app.kubernetes.io/component: nodejs-rest-http-crud
    app.kubernetes.io/instance: nodejs-rest-http-crud
    app.kubernetes.io/name: nodejs
    app.kubernetes.io/part-of: nodejs-rest-http-crud-app
    app.openshift.io/runtime: nodejs
    app.openshift.io/runtime-version: "1"
  name: nodejs-rest-http-crud
  namespace: service-binding-demo
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nodejs-rest-http-crud
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nodejs-rest-http-crud
        deploymentconfig: nodejs-rest-http-crud
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/service-binding-demo/nodejs-rest-http-crud:latest
        imagePullPolicy: Always
        name: nodejs-rest-http-crud
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30