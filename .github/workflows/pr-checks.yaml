name: PR checks

on:
  pull_request:
    branches:
      - master

env:
  GO111MODULE: on

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Run linters
        run: make lint

  unit:
    name: Unit Tests with Code coverage
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Unit Tests with Code Coverage
        run: |
          make test-unit-with-coverage

      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v1
        with:
          file: out/test-coverage/*.txt
          verbose: true
          fail_ci_if_error: true

  acceptance:
    name: Acceptance Tests with Kubernetes
    runs-on: ubuntu-latest

    env:
      SDK_VERSION: "0.16.0"
      OPM_VERSION: "1.15.2"
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      K8S_VERSION: "1.19.2"
      MINIKUBE_VERSION: "1.15.1"
      EXTRA_BEHAVE_ARGS: "--tags=~@knative --tags=~@openshift"
      TEST_ACCEPTANCE_CLI: "kubectl"
      CONTAINER_RUNTIME: "docker"

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2

      - name: Set up PATH
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin/
          echo "PATH=$PATH:$GITHUB_WORKSPACE/bin/" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.15.6"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Set up CLI
        run: |
          curl -Lo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/v${SDK_VERSION}/operator-sdk-v${SDK_VERSION}-x86_64-linux-gnu
          chmod +x operator-sdk
          mv -v operator-sdk $GITHUB_WORKSPACE/bin/

          curl -Lo opm https://github.com/operator-framework/operator-registry/releases/download/v${OPM_VERSION}/linux-amd64-opm
          chmod +x opm
          mv -v opm $GITHUB_WORKSPACE/bin/

          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v${K8S_VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv -v kubectl $GITHUB_WORKSPACE/bin/

          curl -Lo minikube https://storage.googleapis.com/minikube/releases/v${MINIKUBE_VERSION}/minikube-linux-amd64
          chmod +x minikube
          mv -v minikube $GITHUB_WORKSPACE/bin/

      - name: Set KUBECONFIG
        run: |
          KUBECONFIG=$GITHUB_WORKSPACE/miniconfig
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV
          touch $KUBECONFIG

      - name: Set up minikube
        run: |
          ./hack/start-minikube.sh start --kubernetes-version=v${K8S_VERSION} --driver=$CONTAINER_RUNTIME --cpus $(nproc) --memory 5g

      - name: Docker Info
        run: |
          eval $(minikube docker-env)
          docker ps
          kubectl get nodes -o yaml
          kubectl cluster-info
          docker info

      - name: Acceptance tests
        timeout-minutes: 60
        run: |
          eval $(minikube docker-env)
          make OPERATOR_REPO_REF=$(minikube ip):5000/sbo SKIP_REGISTRY_LOGIN=true release-operator -o registry-login test-acceptance-with-bundle
