// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redhat-developer/service-binding-operator/pkg/binding (interfaces: Definition,Value)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	binding "github.com/redhat-developer/service-binding-operator/pkg/binding"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// MockDefinition is a mock of Definition interface.
type MockDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockDefinitionMockRecorder
}

// MockDefinitionMockRecorder is the mock recorder for MockDefinition.
type MockDefinitionMockRecorder struct {
	mock *MockDefinition
}

// NewMockDefinition creates a new mock instance.
func NewMockDefinition(ctrl *gomock.Controller) *MockDefinition {
	mock := &MockDefinition{ctrl: ctrl}
	mock.recorder = &MockDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefinition) EXPECT() *MockDefinitionMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockDefinition) Apply(arg0 *unstructured.Unstructured) (binding.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(binding.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockDefinitionMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockDefinition)(nil).Apply), arg0)
}

// GetPath mocks base method.
func (m *MockDefinition) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockDefinitionMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockDefinition)(nil).GetPath))
}

// NonExistingOptional mocks base method.
func (m *MockDefinition) NonExistingOptional(arg0 binding.Value) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonExistingOptional", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NonExistingOptional indicates an expected call of NonExistingOptional.
func (mr *MockDefinitionMockRecorder) NonExistingOptional(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonExistingOptional", reflect.TypeOf((*MockDefinition)(nil).NonExistingOptional), arg0)
}

// MockValue is a mock of Value interface.
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue.
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance.
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockValue) Get() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockValueMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValue)(nil).Get))
}
